// Generated by ts-to-zod
import { z } from 'zod'
import { Json } from './src/lib/supabase/database.types'

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
)

export const calendarIntegrationsRowSchema = z.object({
  email: z.string(),
  google_id: z.string(),
  id: z.string(),
  name: z.string(),
  resource_id: z.string().nullable(),
  user_id: z.string(),
  uuid: z.string().nullable(),
  watch_expiry: z.string().nullable(),
})

export const calendarIntegrationsInsertSchema = z.object({
  email: z.string(),
  google_id: z.string(),
  id: z.string().optional(),
  name: z.string(),
  resource_id: z.string().optional().nullable(),
  user_id: z.string(),
  uuid: z.string().optional().nullable(),
  watch_expiry: z.string().optional().nullable(),
})

export const calendarIntegrationsUpdateSchema = z.object({
  email: z.string().optional(),
  google_id: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  resource_id: z.string().optional().nullable(),
  user_id: z.string().optional(),
  uuid: z.string().optional().nullable(),
  watch_expiry: z.string().optional().nullable(),
})

export const calendarIntegrationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('calendar_integrations_user_id_fkey'),
    columns: z.tuple([z.literal('user_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('profiles'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const chatsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  latest: z.boolean(),
  messages: jsonSchema,
  topic: z.string().nullable(),
  updated_at: z.string(),
  user_id: z.string(),
})

export const chatsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  latest: z.boolean().optional(),
  messages: jsonSchema,
  topic: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string(),
})

export const chatsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  latest: z.boolean().optional(),
  messages: jsonSchema.optional(),
  topic: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
})

export const chatsRelationshipsSchema = z.tuple([])

export const integrationCredentialsRowSchema = z.object({
  access_token: z.string().nullable(),
  created_at: z.string(),
  expiry_date: z.string().nullable(),
  id: z.string(),
  last_refresh_attempt: z.string().nullable(),
  provider: z.string().nullable(),
  refresh_error: z.string().nullable(),
  refresh_token: z.string().nullable(),
  requires_reauth: z.boolean().nullable(),
  updated_at: z.string(),
  user_id: z.string(),
})

export const integrationCredentialsInsertSchema = z.object({
  access_token: z.string().optional().nullable(),
  created_at: z.string().optional(),
  expiry_date: z.string().optional().nullable(),
  id: z.string().optional(),
  last_refresh_attempt: z.string().optional().nullable(),
  provider: z.string().optional().nullable(),
  refresh_error: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  requires_reauth: z.boolean().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string(),
})

export const integrationCredentialsUpdateSchema = z.object({
  access_token: z.string().optional().nullable(),
  created_at: z.string().optional(),
  expiry_date: z.string().optional().nullable(),
  id: z.string().optional(),
  last_refresh_attempt: z.string().optional().nullable(),
  provider: z.string().optional().nullable(),
  refresh_error: z.string().optional().nullable(),
  refresh_token: z.string().optional().nullable(),
  requires_reauth: z.boolean().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
})

export const integrationCredentialsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('integration_credentials_user_id_fkey'),
    columns: z.tuple([z.literal('user_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('profiles'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const meetingBotErrorCodeTypeSchema = z.union([
  z.literal('CannotJoinMeeting'),
  z.literal('TimeoutWaitingToStart'),
  z.literal('BotNotAccepted'),
  z.literal('InternalError'),
  z.literal('InvalidMeetingUrl'),
])

export const meetingBotStatusTypeSchema = z.union([
  z.literal('joining_call'),
  z.literal('in_waiting_room'),
  z.literal('in_call_not_recording'),
  z.literal('in_call_recording'),
  z.literal('call_ended'),
])

export const meetingBotsInsertSchema = z.object({
  api_video_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  error_code: meetingBotErrorCodeTypeSchema.optional().nullable(),
  id: z.string(),
  mp4_source_url: z.string().optional().nullable(),
  raw_data: jsonSchema.optional().nullable(),
  speakers: z.array(z.string()).optional().nullable(),
  status: meetingBotStatusTypeSchema.optional().nullable(),
})

export const meetingBotsUpdateSchema = z.object({
  api_video_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  error_code: meetingBotErrorCodeTypeSchema.optional().nullable(),
  id: z.string().optional(),
  mp4_source_url: z.string().optional().nullable(),
  raw_data: jsonSchema.optional().nullable(),
  speakers: z.array(z.string()).optional().nullable(),
  status: meetingBotStatusTypeSchema.optional().nullable(),
})

export const meetingBotsRelationshipsSchema = z.tuple([])

export const meetingsRowSchema = z.object({
  clean_vtt_file: z.string().nullable(),
  created_at: z.string(),
  date: z.string().nullable(),
  db_created_at: z.string().nullable(),
  duration_in_ms: z.number().nullable(),
  meeting_baas_original_json: jsonSchema.nullable(),
  name: z.string().nullable(),
  original_vtt_file: z.string().nullable(),
  recorded_at: z.string().nullable(),
  source_url: z.string().nullable(),
  speaker: z.string().nullable(),
  summary: z.string().nullable(),
  tags: z.string().nullable(),
  thumbnail_url: z.string().nullable(),
  video_api_id: z.string(),
})

export const meetingsInsertSchema = z.object({
  clean_vtt_file: z.string().optional().nullable(),
  created_at: z.string().optional(),
  date: z.string().optional().nullable(),
  db_created_at: z.string().optional().nullable(),
  duration_in_ms: z.number().optional().nullable(),
  meeting_baas_original_json: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  original_vtt_file: z.string().optional().nullable(),
  recorded_at: z.string().optional().nullable(),
  source_url: z.string().optional().nullable(),
  speaker: z.string().optional().nullable(),
  summary: z.string().optional().nullable(),
  tags: z.string().optional().nullable(),
  thumbnail_url: z.string().optional().nullable(),
  video_api_id: z.string(),
})

export const meetingsUpdateSchema = z.object({
  clean_vtt_file: z.string().optional().nullable(),
  created_at: z.string().optional(),
  date: z.string().optional().nullable(),
  db_created_at: z.string().optional().nullable(),
  duration_in_ms: z.number().optional().nullable(),
  meeting_baas_original_json: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  original_vtt_file: z.string().optional().nullable(),
  recorded_at: z.string().optional().nullable(),
  source_url: z.string().optional().nullable(),
  speaker: z.string().optional().nullable(),
  summary: z.string().optional().nullable(),
  tags: z.string().optional().nullable(),
  thumbnail_url: z.string().optional().nullable(),
  video_api_id: z.string().optional(),
})

export const meetingsRelationshipsSchema = z.tuple([])

export const momentCommentsRowSchema = z.object({
  content: z.string(),
  created_at: z.string(),
  id: z.string(),
  moment_id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
})

export const momentCommentsInsertSchema = z.object({
  content: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  moment_id: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
})

export const momentCommentsUpdateSchema = z.object({
  content: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  moment_id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
})

export const momentCommentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('moment_comments_moment_id_fkey'),
    columns: z.tuple([z.literal('moment_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('moments'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
  z.object({
    foreignKeyName: z.literal('moment_comments_user_id_fkey'),
    columns: z.tuple([z.literal('user_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('profiles'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const momentReactionTypeSchema = z.union([
  z.literal('thumbs_up'),
  z.literal('thumbs_down'),
])

export const momentReactionsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  moment_id: z.string(),
  reaction_type: momentReactionTypeSchema,
  user_id: z.string(),
})

export const momentReactionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  moment_id: z.string().optional(),
  reaction_type: momentReactionTypeSchema.optional(),
  user_id: z.string().optional(),
})

export const momentReactionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('moment_reactions_moment_id_fkey'),
    columns: z.tuple([z.literal('moment_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('moments'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
  z.object({
    foreignKeyName: z.literal('moment_reactions_user_id_fkey'),
    columns: z.tuple([z.literal('user_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('profiles'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const momentsRowSchema = z.object({
  activity: z.string().nullable(),
  activity_reasoning: z.string().nullable(),
  activity_type: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  intensity: z.number().nullable(),
  latest: z.boolean(),
  moment_url: z.string().nullable(),
  relevant: z.boolean(),
  search_vector: z.unknown().nullable(),
  segment_end_timestamp: z.string().nullable(),
  segment_end_timestamp_in_seconds: z.number().nullable(),
  segment_id_sequence_end: z.number().nullable(),
  segment_id_sequence_start: z.number().nullable(),
  segment_start_timestamp: z.string().nullable(),
  segment_start_timestamp_in_seconds: z.number().nullable(),
  summary: z.string().nullable(),
  target_person_reasoning: z.string().nullable(),
  target_person_type: z.string().nullable(),
  title: z.string().nullable(),
  updated_at: z.string().nullable(),
  version: z.number(),
  video_api_id: z.string().nullable(),
})

export const momentsInsertSchema = z.object({
  activity: z.string().optional().nullable(),
  activity_reasoning: z.string().optional().nullable(),
  activity_type: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string(),
  intensity: z.number().optional().nullable(),
  latest: z.boolean().optional(),
  moment_url: z.string().optional().nullable(),
  relevant: z.boolean().optional(),
  search_vector: z.unknown().optional().nullable(),
  segment_end_timestamp: z.string().optional().nullable(),
  segment_end_timestamp_in_seconds: z.number().optional().nullable(),
  segment_id_sequence_end: z.number().optional().nullable(),
  segment_id_sequence_start: z.number().optional().nullable(),
  segment_start_timestamp: z.string().optional().nullable(),
  segment_start_timestamp_in_seconds: z.number().optional().nullable(),
  summary: z.string().optional().nullable(),
  target_person_reasoning: z.string().optional().nullable(),
  target_person_type: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  version: z.number().optional(),
  video_api_id: z.string().optional().nullable(),
})

export const momentsUpdateSchema = z.object({
  activity: z.string().optional().nullable(),
  activity_reasoning: z.string().optional().nullable(),
  activity_type: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  intensity: z.number().optional().nullable(),
  latest: z.boolean().optional(),
  moment_url: z.string().optional().nullable(),
  relevant: z.boolean().optional(),
  search_vector: z.unknown().optional().nullable(),
  segment_end_timestamp: z.string().optional().nullable(),
  segment_end_timestamp_in_seconds: z.number().optional().nullable(),
  segment_id_sequence_end: z.number().optional().nullable(),
  segment_id_sequence_start: z.number().optional().nullable(),
  segment_start_timestamp: z.string().optional().nullable(),
  segment_start_timestamp_in_seconds: z.number().optional().nullable(),
  summary: z.string().optional().nullable(),
  target_person_reasoning: z.string().optional().nullable(),
  target_person_type: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  version: z.number().optional(),
  video_api_id: z.string().optional().nullable(),
})

export const momentsRelationshipsSchema = z.tuple([])

export const momentsSegmentRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  moments_id: z.string(),
  segment_id: z.string(),
  video_api_id: z.string(),
})

export const momentsSegmentInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string(),
  moments_id: z.string(),
  segment_id: z.string(),
  video_api_id: z.string(),
})

export const momentsSegmentUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  moments_id: z.string().optional(),
  segment_id: z.string().optional(),
  video_api_id: z.string().optional(),
})

export const momentsSegmentRelationshipsSchema = z.tuple([])

export const oauthConnectionsRowSchema = z.object({
  access_token: z.string(),
  calendar_id: z.string(),
  created_at: z.string().nullable(),
  expires_at: z.string(),
  id: z.string(),
  provider: z.string(),
  refresh_token: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string().nullable(),
})

export const oauthConnectionsInsertSchema = z.object({
  access_token: z.string(),
  calendar_id: z.string(),
  created_at: z.string().optional().nullable(),
  expires_at: z.string(),
  id: z.string().optional(),
  provider: z.string(),
  refresh_token: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
})

export const oauthConnectionsUpdateSchema = z.object({
  access_token: z.string().optional(),
  calendar_id: z.string().optional(),
  created_at: z.string().optional().nullable(),
  expires_at: z.string().optional(),
  id: z.string().optional(),
  provider: z.string().optional(),
  refresh_token: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
})

export const oauthConnectionsRelationshipsSchema = z.tuple([])

export const observationPromptsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  latest: z.boolean().nullable(),
  profile_id: z.string().nullable(),
  prompt: z.string(),
  result: z.string().nullable(),
  type: z.string().nullable(),
})

export const observationPromptsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string(),
  latest: z.boolean().optional().nullable(),
  profile_id: z.string().optional().nullable(),
  prompt: z.string(),
  result: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
})

export const observationPromptsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  latest: z.boolean().optional().nullable(),
  profile_id: z.string().optional().nullable(),
  prompt: z.string().optional(),
  result: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
})

export const observationPromptsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('observations_profile_id_fkey'),
    columns: z.tuple([z.literal('profile_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('profiles'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const profileMeetingsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  meetings_id: z.string().nullable(),
  profile_id: z.string().nullable(),
})

export const profileMeetingsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  meetings_id: z.string().optional().nullable(),
  profile_id: z.string().optional().nullable(),
})

export const profileMeetingsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  meetings_id: z.string().optional().nullable(),
  profile_id: z.string().optional().nullable(),
})

export const profileMeetingsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('profiles_metings_meetings_id_fkey'),
    columns: z.tuple([z.literal('meetings_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('meetings'),
    referencedColumns: z.tuple([z.literal('video_api_id')]),
  }),
  z.object({
    foreignKeyName: z.literal('profiles_metings_profile_id_fkey'),
    columns: z.tuple([z.literal('profile_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('profiles'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const profilesRowSchema = z.object({
  email: z.string().nullable(),
  id: z.string(),
  is_admin: z.boolean(),
  nickname: z.string().nullable(),
})

export const profilesInsertSchema = z.object({
  email: z.string().optional().nullable(),
  id: z.string(),
  is_admin: z.boolean().optional(),
  nickname: z.string().optional().nullable(),
})

export const profilesUpdateSchema = z.object({
  email: z.string().optional().nullable(),
  id: z.string().optional(),
  is_admin: z.boolean().optional(),
  nickname: z.string().optional().nullable(),
})

export const profilesRelationshipsSchema = z.tuple([])

export const scheduledMeetingsRowSchema = z.object({
  calendar_id: z.string(),
  conference_id: z.string().nullable(),
  created_at: z.string().nullable(),
  event_id: z.string(),
  id: z.string(),
  meet_link: z.string().nullable(),
  notification_time: z.string(),
  start_time: z.string(),
  status: z.string(),
  summary: z.string().nullable(),
  updated_at: z.string().nullable(),
})

export const scheduledMeetingsInsertSchema = z.object({
  calendar_id: z.string(),
  conference_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  event_id: z.string(),
  id: z.string().optional(),
  meet_link: z.string().optional().nullable(),
  notification_time: z.string(),
  start_time: z.string(),
  status: z.string().optional(),
  summary: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
})

export const scheduledMeetingsUpdateSchema = z.object({
  calendar_id: z.string().optional(),
  conference_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  event_id: z.string().optional(),
  id: z.string().optional(),
  meet_link: z.string().optional().nullable(),
  notification_time: z.string().optional(),
  start_time: z.string().optional(),
  status: z.string().optional(),
  summary: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
})

export const scheduledMeetingsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('scheduled_meetings_calendar_id_fkey'),
    columns: z.tuple([z.literal('calendar_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('calendar_integrations'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const segmentsRowSchema = z.object({
  duration: z.number().nullable(),
  end_timestamp: z.string().nullable(),
  hard_filler_word_count: z.number().nullable(),
  id: z.string(),
  index: z.number().nullable(),
  profanity_count: z.number().nullable(),
  question_count: z.number().nullable(),
  sentence_count: z.number().nullable(),
  soft_filler_word_count: z.number().nullable(),
  speaker_name: z.string().nullable(),
  start_timestamp: z.string().nullable(),
  text: z.string().nullable(),
  total_arousal: z.number().nullable(),
  total_dominance: z.number().nullable(),
  total_valence: z.number().nullable(),
  vad_word_count: z.number().nullable(),
  video_api_id: z.string().nullable(),
  word_count: z.number().nullable(),
})

export const segmentsInsertSchema = z.object({
  duration: z.number().optional().nullable(),
  end_timestamp: z.string().optional().nullable(),
  hard_filler_word_count: z.number().optional().nullable(),
  id: z.string(),
  index: z.number().optional().nullable(),
  profanity_count: z.number().optional().nullable(),
  question_count: z.number().optional().nullable(),
  sentence_count: z.number().optional().nullable(),
  soft_filler_word_count: z.number().optional().nullable(),
  speaker_name: z.string().optional().nullable(),
  start_timestamp: z.string().optional().nullable(),
  text: z.string().optional().nullable(),
  total_arousal: z.number().optional().nullable(),
  total_dominance: z.number().optional().nullable(),
  total_valence: z.number().optional().nullable(),
  vad_word_count: z.number().optional().nullable(),
  video_api_id: z.string().optional().nullable(),
  word_count: z.number().optional().nullable(),
})

export const segmentsUpdateSchema = z.object({
  duration: z.number().optional().nullable(),
  end_timestamp: z.string().optional().nullable(),
  hard_filler_word_count: z.number().optional().nullable(),
  id: z.string().optional(),
  index: z.number().optional().nullable(),
  profanity_count: z.number().optional().nullable(),
  question_count: z.number().optional().nullable(),
  sentence_count: z.number().optional().nullable(),
  soft_filler_word_count: z.number().optional().nullable(),
  speaker_name: z.string().optional().nullable(),
  start_timestamp: z.string().optional().nullable(),
  text: z.string().optional().nullable(),
  total_arousal: z.number().optional().nullable(),
  total_dominance: z.number().optional().nullable(),
  total_valence: z.number().optional().nullable(),
  vad_word_count: z.number().optional().nullable(),
  video_api_id: z.string().optional().nullable(),
  word_count: z.number().optional().nullable(),
})

export const segmentsRelationshipsSchema = z.tuple([])

export const transcriptSlicesRowSchema = z.object({
  bot_id: z.string(),
  created_at: z.string(),
  id: z.string(),
  index: z.number(),
  speaker_name: z.string().nullable(),
})

export const transcriptSlicesInsertSchema = z.object({
  bot_id: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  index: z.number(),
  speaker_name: z.string().optional().nullable(),
})

export const transcriptSlicesUpdateSchema = z.object({
  bot_id: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  index: z.number().optional(),
  speaker_name: z.string().optional().nullable(),
})

export const transcriptSlicesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('meeting_bot_transcript_slices_bot_id_fkey'),
    columns: z.tuple([z.literal('bot_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('meeting_bot_transcripts'),
    referencedColumns: z.tuple([z.literal('bot_id')]),
  }),
  z.object({
    foreignKeyName: z.literal('meeting_bot_transcript_slices_bot_id_fkey'),
    columns: z.tuple([z.literal('bot_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('meeting_bots'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const transcriptWordsRowSchema = z.object({
  bot_id: z.string(),
  content: z.string().nullable(),
  created_at: z.string(),
  end_time: z.number().nullable(),
  id: z.string(),
  index: z.number().nullable(),
  start_time: z.number().nullable(),
  transcript_slice_id: z.string(),
})

export const transcriptWordsInsertSchema = z.object({
  bot_id: z.string().optional(),
  content: z.string().optional().nullable(),
  created_at: z.string().optional(),
  end_time: z.number().optional().nullable(),
  id: z.string().optional(),
  index: z.number().optional().nullable(),
  start_time: z.number().optional().nullable(),
  transcript_slice_id: z.string().optional(),
})

export const transcriptWordsUpdateSchema = z.object({
  bot_id: z.string().optional(),
  content: z.string().optional().nullable(),
  created_at: z.string().optional(),
  end_time: z.number().optional().nullable(),
  id: z.string().optional(),
  index: z.number().optional().nullable(),
  start_time: z.number().optional().nullable(),
  transcript_slice_id: z.string().optional(),
})

export const transcriptWordsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('transcript_words_bot_id_fkey'),
    columns: z.tuple([z.literal('bot_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('meeting_bot_transcripts'),
    referencedColumns: z.tuple([z.literal('bot_id')]),
  }),
  z.object({
    foreignKeyName: z.literal('transcript_words_bot_id_fkey'),
    columns: z.tuple([z.literal('bot_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('meeting_bots'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
  z.object({
    foreignKeyName: z.literal('transcript_words_transcript_slice_id_fkey'),
    columns: z.tuple([z.literal('transcript_slice_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('transcript_slices'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const meetingBotTranscriptsRowSchema = z.object({
  bot_id: z.string().nullable(),
  transcripts: z.array(jsonSchema).nullable(),
})

export const meetingBotTranscriptsRelationshipsSchema = z.tuple([])

export const momentCommentWithUserSchema = z.object({
  id: z.string().nullable(),
  moment_id: z.string().nullable(),
  user_id: z.string().nullable(),
  content: z.string().nullable(),
  created_at: z.string().nullable(),
  updated_at: z.string().nullable(),
  user_nickname: z.string().nullable(),
  user_avatar_url: z.string().nullable(),
  user_is_admin: z.boolean().nullable(),
})

export const momentReactionWithUserSchema = z.object({
  id: z.string().nullable(),
  moment_id: z.string().nullable(),
  reaction_type: z.string().nullable(),
  created_at: z.string().nullable(),
  user_id: z.string().nullable(),
  user_nickname: z.string().nullable(),
  user_avatar_url: z.string().nullable(),
  user_is_admin: z.boolean().nullable(),
})

export const meetingBotsRowSchema = z.object({
  api_video_id: z.string().nullable(),
  created_at: z.string(),
  error_code: meetingBotErrorCodeTypeSchema.nullable(),
  id: z.string(),
  mp4_source_url: z.string().nullable(),
  raw_data: jsonSchema.nullable(),
  speakers: z.array(z.string()).nullable(),
  status: meetingBotStatusTypeSchema.nullable(),
})

export const momentReactionsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  moment_id: z.string(),
  reaction_type: momentReactionTypeSchema,
  user_id: z.string(),
})
