import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

import { env } from "~/env";

{{#each schemas}}
export const {{@key}} = {{{this}}};
export type {{@key}} = z.infer<typeof {{@key}}>;

{{/each}}

{{#each endpointsGroups}}
const {{toCamelCase @key}}Endpoints = makeApi([
  {{#each this.endpoints}}
  {
    method: "{{method}}",
    path: "{{path}}",
    {{#if @root.options.withAlias}}
    {{#if alias}}
    alias: "{{alias}}",
    {{/if}}
    {{/if}}
    {{#if description}}
    description: `{{description}}`,
    {{/if}}
    {{#if requestFormat}}
    requestFormat: "{{requestFormat}}",
    {{/if}}
    {{#if parameters}}
    parameters: [
      {{#each parameters}}
      {
        name: "{{name}}",
        {{#if description}}
        description: `{{description}}`,
        {{/if}}
        {{#if type}}
        type: "{{type}}",
        {{/if}}
        schema: {{{schema}}}
      },
      {{/each}}
    ],
    {{/if}}
    response: {{{response}}},
    {{#if errors.length}}
    errors: [
      {{#each errors}}
      {
        {{#ifeq status "default"}}
        status: "default",
        {{else}}
        status: {{status}},
        {{/ifeq}}
        {{#if description}}
        description: `{{description}}`,
        {{/if}}
        schema: {{{schema}}}
      },
      {{/each}}
    ],
    {{/if}}
  },
  {{/each}}
]);
{{/each}}

const BASE_URL = env.RECALL_BASE_URL;

export function createClient(options?: ZodiosOptions) {
  const mergedOptions = {
    ...options,
    axiosConfig: {
      baseURL: BASE_URL,
      ...options?.axiosConfig,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Token ${env.RECALL_API_KEY}`,
        ...options?.axiosConfig?.headers,
      },
    },
  } satisfies ZodiosOptions;

  return {
    {{#each endpointsGroups}}
    {{toCamelCase @key}}: new Zodios(BASE_URL, {{toCamelCase @key}}Endpoints, mergedOptions),
    {{/each}}
  } as const;
}